heat_template_version: 2015-10-15

description: |
  This is a Heat template to deploy a single Linux server running Redis slave.

parameters:

  flavor:
    description: Flavor for Cloud Servers
    type: string
    default: 512MB Standard Instance

  image:
    label: Server Image
    description: Operating system to use for created servers
    type: string
    default: Centos 6 (PVHVM)
    constraints:
    - allowed_values:
      - Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
      - Centos 6 (PVHVM)
    description: Must be a supported operating system.

  redis_version:
    description: version of redis to install
    type: string
    default: 3.0.7

  server_hostname:
    description: Hostname for the server.
    type: string
    default: redis-slave

  ssh_keypair_name:
    description: Nova keypair name for ssh access to the server
    type: string

  ssh_private_key:
    description: private key to access the created servers
    type: string

  master_ip:
    description: IP address of redis master server to which we are enslaved
    type: string

  redis_password:
    description: password for redis auth
    type: string

  redis_port:
    description: port for redis servers to listen on
    type: number
    default: 6379

  sentinel_port:
    description: port for sentinels to listen on
    type: number
    default: 26379

  stack_id:
    type: string
    default: heat

  kitchen:
    label: Kitchen
    description: URL for the kitchen to use
    type: string
    default: https://github.com/radeasy/redis-sentinel
    #default: https://github.com/rackspace-orchestration-templates/redis-sentinel

resources:

  slave_pw:
    type: OS::Heat::RandomString
    properties:
      length: 18
      sequence: lettersdigits


  redis_slave_server:
    type: "OS::Nova::Server"
    properties:
      name: { get_param: server_hostname }
      admin_pass: { get_attr: [ slave_pw, value ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: ssh_keypair_name }
      metadata:
        rax-heat: { get_param: stack_id }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        # EPEL Repository.
        sudo yum install -q -y epel-release
        # Rpmforge Repository.
        sudo rpm -ivh --force http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
        sudo sed -i '1,10 s/^enabled.*=.*/enabled=1/g' /etc/yum.repos.d/rpmforge.repo
        # Remi Repository.
        sudo rpm -ivh --force http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
        sudo sed -i '1,10 s/^enabled.*=.*/enabled=1/g' /etc/yum.repos.d/remi.repo
        # Install dependencies and bashrc.
        sudo yum install -y git libselinux-python python-pycurl python-pip python-devel ntp nano htop ansible bind-utils curses glances

#  redis_slave_setup:
#    type: "OS::Heat::ChefSolo"
#    depends_on: redis_slave_server
#    properties:
#      username: root
#      private_key: { get_param: ssh_private_key }
#      host: { get_attr: [redis_slave_server, accessIPv4] }
#      kitchen: { get_param: kitchen }
#      chef_version: { get_param: chef_version }
#      node:
#        run_list: [ "recipe[rax-redis::config_slave_sentinel]" ]
#        redisio:
#          default_settings:
#            slaveof:
#              address:  { get_param: master_ip }
#              port:     { get_param: redis_port }
#            masterauth: { get_param: redis_password }
#          servers:
#            - name: slave
#              port: { get_param: redis_port }
#          sentinels:
#            - sentinel_port: { get_param: sentinel_port }
#              port:          { get_param: sentinel_port }
#              name: 'cluster'
#              master_ip:     { get_param: master_ip }
#              master_port:   { get_param: redis_port }
#              auth-pass:     { get_param: redis_password }
#              logfile: /var/log/sentinel.log
#          version: { get_param: redis_version }

outputs:

  redis_slave_ip:
    value: { get_attr: [redis_slave_server, accessIPv4] }

  slave_pw:
    value: { get_attr: [slave_pw, value] }